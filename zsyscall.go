package com

// generated by mkcomcall syscall.go iunknown.go

import (
	"syscall"
	"unsafe"
)

var _ unsafe.Pointer

var (
	modole32 = syscall.NewLazyDLL("ole32.dll")

	procCoInitialize     = modole32.NewProc("CoInitialize")
	procCLSIDFromProgID  = modole32.NewProc("CLSIDFromProgID")
	procCoCreateInstance = modole32.NewProc("CoCreateInstance")
	procStringFromGUID2  = modole32.NewProc("StringFromGUID2")
	procCLSIDFromString  = modole32.NewProc("CLSIDFromString")
)

func CoInitialize(reserved int) (err error) {
	_res, _, _ := procCoInitialize.Call(uintptr(reserved))
	if _res != 0 {
		err = HResult(_res)
	}
	return
}

func CLSIDFromProgID(progID string) (classID GUID, err error) {
	var _p0 *uint16
	_p0, err = syscall.UTF16PtrFromString(progID)
	if err != nil {
		return
	}

	_res, _, _ := procCLSIDFromProgID.Call(uintptr(unsafe.Pointer(_p0)),
		uintptr(unsafe.Pointer(&classID)))
	if _res != 0 {
		err = HResult(_res)
	}
	return
}

func CoCreateInstance(classID *GUID, outer *IUnknown, clsContext uint32, iid *GUID) (instance unsafe.Pointer, err error) {
	_res, _, _ := procCoCreateInstance.Call(uintptr(unsafe.Pointer(classID)),
		uintptr(unsafe.Pointer(outer)),
		uintptr(clsContext),
		uintptr(unsafe.Pointer(iid)),
		uintptr(unsafe.Pointer(&instance)))
	if _res != 0 {
		err = HResult(_res)
	}
	return
}

func StringFromGUID2(guid *GUID, str []uint16) (n int) {
	_res, _, _ := procStringFromGUID2.Call(uintptr(unsafe.Pointer(guid)),
		uintptr(unsafe.Pointer(&str[0])),
		uintptr(len(str)))
	n = int(_res)
	return
}

func CLSIDFromString(s string) (clsID GUID, err error) {
	var _p0 *uint16
	_p0, err = syscall.UTF16PtrFromString(s)
	if err != nil {
		return
	}

	_res, _, _ := procCLSIDFromString.Call(uintptr(unsafe.Pointer(_p0)),
		uintptr(unsafe.Pointer(&clsID)))
	if _res != 0 {
		err = HResult(_res)
	}
	return
}

var IID_IUnknown = NewGUID("{00000000-0000-0000-C000-000000000046}")

type IUnknown struct {
	*VTable
}

func (this *IUnknown) QueryInterface(iid *GUID) (object unsafe.Pointer, err error) {
	_res, _, _ := syscall.Syscall(this.VTable[0], 3,
		uintptr(unsafe.Pointer(this)),
		uintptr(unsafe.Pointer(iid)),
		uintptr(unsafe.Pointer(&object)))
	if _res != 0 {
		err = HResult(_res)
	}
	return
}

func (this *IUnknown) AddRef() (newCount int) {
	_res, _, _ := syscall.Syscall(this.VTable[1], 1,
		uintptr(unsafe.Pointer(this)),
		0,
		0)
	newCount = int(_res)
	return
}

func (this *IUnknown) Release() (newCount int) {
	_res, _, _ := syscall.Syscall(this.VTable[2], 1,
		uintptr(unsafe.Pointer(this)),
		0,
		0)
	newCount = int(_res)
	return
}
