package ado

// generated by mkcomcall ado.go connection.go

import (
	"com-and-go"
	"syscall"
	"unsafe"
)

var _ unsafe.Pointer

var IID_Connection = com.NewGUID("{00000550-0000-0010-8000-00AA006D2EA4}")
var CLSID_Connection = com.NewGUID("{00000514-0000-0010-8000-00AA006D2EA4}")

func NewConnection() (*Connection, error) {
	u, err := com.CoCreateInstance(CLSID_Connection, nil, 21, IID_Connection)
	if err != nil {
		return nil, err
	}
	return (*Connection)(u), nil
}

type Connection struct {
	_ADO
}

func (this *Connection) ConnectionString() (str string, err error) {
	var _tmp_str com.BStr

	_res, _, _ := syscall.Syscall(this.VTable[8], 2,
		uintptr(unsafe.Pointer(this)),
		uintptr(unsafe.Pointer(&_tmp_str)),
		0)
	if _res != 0 {
		err = com.HResult(_res)
	}
	str = _tmp_str.String()
	com.SysFreeString(_tmp_str)
	return
}

func (this *Connection) PutConnectionString(str string) (err error) {
	_res, _, _ := syscall.Syscall(this.VTable[9], 2,
		uintptr(unsafe.Pointer(this)),
		uintptr(unsafe.Pointer(com.BStrFromString(str).P)),
		0)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Connection) CommandTimeout() (timeout int32, err error) {
	_res, _, _ := syscall.Syscall(this.VTable[10], 2,
		uintptr(unsafe.Pointer(this)),
		uintptr(unsafe.Pointer(&timeout)),
		0)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Connection) PutCommandTimeout(timeout int32) (err error) {
	_res, _, _ := syscall.Syscall(this.VTable[11], 2,
		uintptr(unsafe.Pointer(this)),
		uintptr(timeout),
		0)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Connection) ConnectionTimeout() (timeout int32, err error) {
	_res, _, _ := syscall.Syscall(this.VTable[12], 2,
		uintptr(unsafe.Pointer(this)),
		uintptr(unsafe.Pointer(&timeout)),
		0)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Connection) PutConnectionTimeout(timeout int32) (err error) {
	_res, _, _ := syscall.Syscall(this.VTable[13], 2,
		uintptr(unsafe.Pointer(this)),
		uintptr(timeout),
		0)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Connection) Version() (version string, err error) {
	var _tmp_version com.BStr

	_res, _, _ := syscall.Syscall(this.VTable[14], 2,
		uintptr(unsafe.Pointer(this)),
		uintptr(unsafe.Pointer(&_tmp_version)),
		0)
	if _res != 0 {
		err = com.HResult(_res)
	}
	version = _tmp_version.String()
	com.SysFreeString(_tmp_version)
	return
}

func (this *Connection) Close() (err error) {
	_res, _, _ := syscall.Syscall(this.VTable[15], 1,
		uintptr(unsafe.Pointer(this)),
		0,
		0)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Connection) Execute(commandText string, recordsAffected *com.Variant, options int32) (rset *Recordset, err error) {
	_res, _, _ := syscall.Syscall6(this.VTable[16], 5,
		uintptr(unsafe.Pointer(this)),
		uintptr(unsafe.Pointer(com.BStrFromString(commandText).P)),
		uintptr(unsafe.Pointer(recordsAffected)),
		uintptr(options),
		uintptr(unsafe.Pointer(&rset)),
		0)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Connection) BeginTrans() (level int32, err error) {
	_res, _, _ := syscall.Syscall(this.VTable[17], 2,
		uintptr(unsafe.Pointer(this)),
		uintptr(unsafe.Pointer(&level)),
		0)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Connection) CommitTrans() (err error) {
	_res, _, _ := syscall.Syscall(this.VTable[18], 1,
		uintptr(unsafe.Pointer(this)),
		0,
		0)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Connection) RolbackTrans() (err error) {
	_res, _, _ := syscall.Syscall(this.VTable[19], 1,
		uintptr(unsafe.Pointer(this)),
		0,
		0)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Connection) Open(connectionString string, userID string, password string, options int32) (err error) {
	_res, _, _ := syscall.Syscall6(this.VTable[20], 5,
		uintptr(unsafe.Pointer(this)),
		uintptr(unsafe.Pointer(com.BStrFromString(connectionString).P)),
		uintptr(unsafe.Pointer(com.BStrFromString(userID).P)),
		uintptr(unsafe.Pointer(com.BStrFromString(password).P)),
		uintptr(options),
		0)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Connection) Errors() (obj *Errors, err error) {
	_res, _, _ := syscall.Syscall(this.VTable[21], 2,
		uintptr(unsafe.Pointer(this)),
		uintptr(unsafe.Pointer(&obj)),
		0)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Connection) DefaultDatabase() (str string, err error) {
	var _tmp_str com.BStr

	_res, _, _ := syscall.Syscall(this.VTable[22], 2,
		uintptr(unsafe.Pointer(this)),
		uintptr(unsafe.Pointer(&_tmp_str)),
		0)
	if _res != 0 {
		err = com.HResult(_res)
	}
	str = _tmp_str.String()
	com.SysFreeString(_tmp_str)
	return
}

func (this *Connection) PutDefaultDatabase(str string) (err error) {
	_res, _, _ := syscall.Syscall(this.VTable[23], 2,
		uintptr(unsafe.Pointer(this)),
		uintptr(unsafe.Pointer(com.BStrFromString(str).P)),
		0)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Connection) IsolationLevel() (level int32, err error) {
	_res, _, _ := syscall.Syscall(this.VTable[24], 2,
		uintptr(unsafe.Pointer(this)),
		uintptr(unsafe.Pointer(&level)),
		0)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Connection) PutIsolationLevel(level int32) (err error) {
	_res, _, _ := syscall.Syscall(this.VTable[25], 2,
		uintptr(unsafe.Pointer(this)),
		uintptr(level),
		0)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Connection) Attributes() (attr int32, err error) {
	_res, _, _ := syscall.Syscall(this.VTable[26], 2,
		uintptr(unsafe.Pointer(this)),
		uintptr(unsafe.Pointer(&attr)),
		0)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Connection) PutAttributes(attr int32) (err error) {
	_res, _, _ := syscall.Syscall(this.VTable[27], 2,
		uintptr(unsafe.Pointer(this)),
		uintptr(attr),
		0)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Connection) CursorLocation() (cursorLoc int32, err error) {
	_res, _, _ := syscall.Syscall(this.VTable[28], 2,
		uintptr(unsafe.Pointer(this)),
		uintptr(unsafe.Pointer(&cursorLoc)),
		0)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Connection) PutCursorLocation(cursorLoc int32) (err error) {
	_res, _, _ := syscall.Syscall(this.VTable[29], 2,
		uintptr(unsafe.Pointer(this)),
		uintptr(cursorLoc),
		0)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Connection) Mode() (mode int32, err error) {
	_res, _, _ := syscall.Syscall(this.VTable[30], 2,
		uintptr(unsafe.Pointer(this)),
		uintptr(unsafe.Pointer(&mode)),
		0)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Connection) PutMode(mode int32) (err error) {
	_res, _, _ := syscall.Syscall(this.VTable[31], 2,
		uintptr(unsafe.Pointer(this)),
		uintptr(mode),
		0)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Connection) Provider() (provider string, err error) {
	var _tmp_provider com.BStr

	_res, _, _ := syscall.Syscall(this.VTable[32], 2,
		uintptr(unsafe.Pointer(this)),
		uintptr(unsafe.Pointer(&_tmp_provider)),
		0)
	if _res != 0 {
		err = com.HResult(_res)
	}
	provider = _tmp_provider.String()
	com.SysFreeString(_tmp_provider)
	return
}

func (this *Connection) PutProvider(provider string) (err error) {
	_res, _, _ := syscall.Syscall(this.VTable[33], 2,
		uintptr(unsafe.Pointer(this)),
		uintptr(unsafe.Pointer(com.BStrFromString(provider).P)),
		0)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Connection) State() (objState int32, err error) {
	_res, _, _ := syscall.Syscall(this.VTable[34], 2,
		uintptr(unsafe.Pointer(this)),
		uintptr(unsafe.Pointer(&objState)),
		0)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Connection) _OpenSchema() {
	_res, _, _ := syscall.Syscall(this.VTable[35], 1,
		uintptr(unsafe.Pointer(this)),
		0,
		0)
	_ = _res
	return
}

func (this *Connection) Cancel() (err error) {
	_res, _, _ := syscall.Syscall(this.VTable[36], 1,
		uintptr(unsafe.Pointer(this)),
		0,
		0)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

var IID__ADO = com.NewGUID("{00000534-0000-0010-8000-00AA006D2EA4}")

type _ADO struct {
	com.IDispatch
}

func (this *_ADO) Properties() (props *Properties, err error) {
	_res, _, _ := syscall.Syscall(this.VTable[7], 2,
		uintptr(unsafe.Pointer(this)),
		uintptr(unsafe.Pointer(&props)),
		0)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}
